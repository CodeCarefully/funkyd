// Code generated by mockery v1.1.2. DO NOT EDIT.

package main

import (
	time "time"

	dns "github.com/miekg/dns"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Dial provides a mock function with given fields: address
func (_m *MockClient) Dial(address string) (*dns.Conn, error) {
	ret := _m.Called(address)

	var r0 *dns.Conn
	if rf, ok := ret.Get(0).(func(string) *dns.Conn); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeWithConn provides a mock function with given fields: s, conn
func (_m *MockClient) ExchangeWithConn(s *dns.Msg, conn *dns.Conn) (*dns.Msg, time.Duration, error) {
	ret := _m.Called(s, conn)

	var r0 *dns.Msg
	if rf, ok := ret.Get(0).(func(*dns.Msg, *dns.Conn) *dns.Msg); ok {
		r0 = rf(s, conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Msg)
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(*dns.Msg, *dns.Conn) time.Duration); ok {
		r1 = rf(s, conn)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dns.Msg, *dns.Conn) error); ok {
		r2 = rf(s, conn)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
